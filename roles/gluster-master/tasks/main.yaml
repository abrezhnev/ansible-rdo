
#
# Configure gluster peers
#
  
- name: configure other gluster peers
  action: shell gluster peer probe ${hostvars.${item}.ansible_eth0.ipv4.address}
  with_items: ${groups.gluster_nodes}
  tags: gluster_volume      
         
#
# Build a volume
#       
  
# Create a volume locally for now ...
- name: set up a gluster volume with one brick
  shell: gluster volume create ${gluster_volume_name} transport tcp ${ansible_eth0.ipv4.address}:${gluster_local_storage_path}
  tags: gluster_volume
  ignore_errors: yes
    
# Add other bricks from peers to the volume
- name: add bricks to gluster volume
  shell: gluster volume add-brick ${gluster_volume_name} ${gluster_vol_options} ${hostvars.{$item}.ansible_eth0.ipv4.address}:${gluster_local_storage_path}
  with_items: ${groups.gluster_nodes}  
  tags: gluster_volume
  ignore_errors: yes
        
# Start it.
- name: start up the gluster volume
  shell: gluster volume start ${gluster_volume_name}
  tags: gluster_volume
  ignore_errors: yes
          
# query it  
- name: set up a gluster volume
  shell: gluster volume info
  tags: gluster_volume
  
# try to mount it locally for kicks & grins ...

- name: setup a mount point for the gluster fs volume
  file: path=/mnt/${gluster_volume_name} state=directory owner=root group=root mode=0755
  tags: gluster_volume
  ignore_errors: yes
  
- name: mount the gluster volume as another filesystem
  shell: mount -t glusterfs ${ansible_eth0.ipv4.address}:${gluster_volume_name} /mnt/${gluster_volume_name}
  tags: gluster_volume
  
# Test it out ... 
- name: create gluster test script
  action: template src="gluster_test.sh.j2" dest="/tmp/gluster_test.sh"  owner="root" group="root" mode="0755"
  tags: gluster_volume
  
- name: run test 
  shell: /tmp/gluster_test.sh
  tags: gluster_volume
  ignore_errors: yes
    