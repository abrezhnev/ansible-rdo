---
# Run temptest tests
#  on deployed host
#


#
# Read OS credentials
#
- name: read in admin password
  shell: grep OS_PASSWORD /root/keystonerc_admin | awk -F= '{ print $2 }'
  register: admin_pass


- name: read in admin password
  shell: grep OS_AUTH_URL /root/keystonerc_admin | awk -F= '{ print $2 }'
  register: auth_url  

- name: read in admin token
  shell: grep "^admin_token" /etc/keystone/keystone.conf | awk -F= '{ print $2 }' | sed 's/ //'
  register: admin_token 

#
# Create and read EC2 credentials
#

- name: create ec2 credentials script
  template: src=create-ec2-credentials.sh.j2 dest=/tmp/create-ec2-credentials.sh mode=755
  
- name: create ec2 credentials 
  shell: source /root/keystonerc_admin && /tmp/create-ec2-credentials.sh

- name: read in EC2 access key 
  shell: grep aws_access_key_id /root/.aws.conf | awk -F= '{ print $2 }'
  register: access_key 

- name: read in EC2 secret key 
  shell: grep aws_secret_access_key /root/.aws.conf | awk -F= '{ print $2 }'
  register: secret_key 

#
# Create testing objects 
#

- name: create a test tenant
  keystone_user: token={{ admin_token.stdout }} tenant=test_tenant tenant_description="New Tenant for Testing"
  register: tenant1

- name: create a test tenant again
  keystone_user: token={{ admin_token.stdout }} tenant=test_tenant2  tenant_description="New Tenant for Testing v2"
  register: tenant2

- name: Create the user for tenant 1
  keystone_user: token={{ admin_token.stdout }} user=test_user tenant=test_tenant
                                  password={{ admin_pass.stdout }}

- name: Create the user for tenant 2
  keystone_user: token={{ admin_token.stdout }} user=test_user2 tenant=test_tenant2
                                  password={{ admin_pass.stdout }}

- name: write test object creation script
  template: src=create-testing-objects.sh.j2 dest=/tmp/create-testing-objects.sh mode=755
  
- name: write test object deletion script
  template: src=delete-testing-objects.sh.j2 dest=/tmp/delete-testing-objects.sh mode=755
  
- name: create test objects 
  shell: source /root/keystonerc_admin && /tmp/create-testing-objects.sh 
  register: test_object_info
  environment: proxy_env 

- name: create script to read remote image id
  template: src=get-image-id.sh.j2 dest=/tmp/get-image-id.sh mode=755

- name: grab image ID
  shell:  source /root/keystonerc_admin && /tmp/get-image-id.sh  testing-cirros-0.3.1
  register: image_id

- name: grab image 2 ID
  shell: source /root/keystonerc_admin && /tmp/get-image-id.sh  testing-Fedora19
  register: image2_id

- name: read in public router ID
  shell:  source /root/keystonerc_admin && neutron net-list | grep test-public-net-1 | awk '{print $2}'
  register: pub_net_id

#
#  Prepare to run tempest
#           

- name: pull tempest from GitHub
  git: repo=https://github.com/openstack/tempest.git
       dest=/tmp/tempest
       version=stable/{{ openstack_release }}
  environment: proxy_env
  ignore_errors: yes

- name: setup a tempest test config
  template: src=tempest.conf.j2 dest=/tmp/tempest/etc/tempest.conf

- name: retrieve tempest.conf locally for running the tests from your client
  fetch: src=/tmp/tempest/etc/tempest.conf dest=tempest.conf flat=yes

- name: keystonerc_admin locally as well, for good measure
  fetch: src=/root/keystonerc_admin dest=keystonerc_admin flat=yes

- name: Install packages for testing with tempest
  yum: name={{ item }} state=installed
  with_items:
   - python-testrepository
   - python-virtualenv
   - libxslt-devel
  environment: proxy_env  

- name: Install python modules testing with tempest
  command: easy_install {{ item }}
  with_items:
   - flake8
   - testresources
   - nose-alembic-attrib
   - awscli
  environment: proxy_env


#
# Run API tests and gather results
#
#- name: run tempest API tests
#  shell: cd /tmp/tempest && > /tmp/tempest.log && echo "Y" | PYTHONPATH=/tmp/tempest ./run_tests.sh -c  -- -v -w tempest/api/{{ item }} > /tmp/tempest-{{ item }}.out 2>&1 ; mv /tmp/tempest.log /tmp/tempest-{{ item }}.log
#  with_items: [ identity, image, volume, compute, network, object_storage, orchestration ]

#
# Run other tests 
#
#- name: run tempest API tests for Identity API
#  shell: cd /tmp/tempest && > /tmp/tempest.log && echo "Y" | ./run_tests.sh -c  -- -v -w tempest/{{ item }} > /tmp/tempest-{{ item }}.out 2>&1 && mv /tmp/tempest.log /tmp/tempest-{{ item }}.log
#  with_items: [ cli, thirdparty, scenario ]

#
# Grab all the test log and outputs
#  
#- name: Grab API test logs
#  fetch: src=/tmp/tempest-{{ item }}.log dest=tempest-{{ item }}.log flat=yes
#  with_items: [ identity, image, volume, compute, network, object_storage, orchestration, cli, thirdparty, scenario ]

#- name: Grab API test outputs
#  fetch: src=/tmp/tempest-{{ item }}.out dest=tempest-{{ item }}.out flat=yes
#  with_items: [ identity, image, volume, compute, network, object_storage, orchestration, cli, thirdparty, scenario ]


# Stress tests go here ... once I can figure out how to run them.

