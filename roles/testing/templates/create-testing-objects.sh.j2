#!/bin/bash

function get_k_id 
{
   RETVAL=$( keystone ${1}-list | grep ${2} | awk '{print $2}' )
   echo $RETVAL
}

function get_q_id 
{
   RETVAL=$( neutron ${1}-list | grep ${2} | awk '{print $2}' )
   echo $RETVAL
}


cd /tmp

#
# Make sure we have an image to use 
#
 
if ! [ -r /tmp/cirros-0.3.1-x86_64-disk.img ]; then 
	wget http://download.cirros-cloud.net/0.3.1/cirros-0.3.1-x86_64-disk.img 
fi

CIRROS_IMAGE_ID=$( glance index | grep cirros-0.3.1 | awk '{ print $1}' )

if [ -z ${CIRROS_IMAGE_ID} ]; then
	IMAGE_INFO=$( glance image-create --name cirros-0.3.1 --is-public True --disk-format qcow2 --container-format bare --file cirros-0.3.1-x86_64-disk.img )
    CIRROS_IMAGE_ID=$( echo "${IMAGE_INFO}" |  grep "| id" | awk '{print $4}' )
fi

echo "IMAGE_ID: ${CIRROS_IMAGE_ID}"


#
# Make sure we have another image to use 
#
 
if ! [ -r /tmp/Fedora-x86_64-19-20130627-sda.qcow2 ]; then 
	wget http://download.fedoraproject.org/pub/fedora/linux/releases/19/Images/x86_64/Fedora-x86_64-19-20130627-sda.qcow2
fi

F19_IMAGE_ID=$( glance index | grep Fedora19 | awk '{ print $1}' )

if [ -z ${F19_IMAGE_ID} ]; then
	IMAGE_INFO=$( glance image-create --name Fedora19 --is-public True --disk-format qcow2 --container-format bare --file Fedora-x86_64-19-20130627-sda.qcow2 )
    F19_IMAGE_ID=$( echo "${IMAGE_INFO}" |  grep "| id" | awk '{print $4}' )
fi

echo "IMAGE2_ID: ${F19_IMAGE_ID}"


#
# Create Neutron objects
# 
                                                                                                                                                                                                    
id="1"

    tenant="TestTenant${id}"
    tenant_id=$( get_k_id tenant " ${tenant} " )

    # Create a private net and subnet                                                                                                                                                                 
    net_id=$( get_q_id net "test-private-net-${id}" )
    if [ -z ${net_id} ]; then
        neutron net-create    --tenant_id $tenant_id "test-private-net-${id}"
        net_id=$( get_q_id net "test-private-net-${id}" )
    fi

    subnet_id=$( get_q_id subnet "192.168.10${id}.0/24" )
    if [ -z ${subnet_id} ]; then
        neutron subnet-create --tenant_id $tenant_id \
                              --ip_version 4 \
                              --gateway "192.168.10${id}.1" \
                              --name "test-private-subnet-${id}"  \
                               "test-private-net-${id}" "192.168.10${id}.0/24"
        subnet_id=$( get_q_id subnet "192.168.10${id}.0/24" )
    fi

    # Create a router and itnerface o nthe router.                                                                                                                                                    
    router_id=$(  get_q_id router "test-router-${id}" )
    if [ -z ${router_id} ]; then
        neutron router-create --tenant_id $tenant_id "test-router-${id}"
        router_id=$(  get_q_id router "test-router-${id}" )
    fi
    neutron router-interface-add "test-router-${id}" $subnet_id || /bin/true

    # Create an external network, and configure the external network as router gw 
    pub_net_id=$( get_q_id net "test-public-net-${id}" )
    if [ -z ${pub_net_id} ]; then                                                                                                          
        neutron net-create  --tenant_id $tenant_id "test-public-net-${id}" --shared -- --router:external=True
        pub_net_id=$( get_q_id net "test-public-net-${id}" )
    fi
    neutron router-gateway-set "test-router-${id}" $pub_net_id || /bin/true

    # Add a subnet wth external IP addresses
    pub_subnet_id=$( get_q_id subnet "10.255.73.128/27" )
    if [ -z ${pub_subnet_id} ]; then
        neutron subnet-create --tenant_id $tenant_id \
                          --ip_version 4 \
                          --allocation-pool start=10.255.73.129,end=10.255.73.254 \
                          --gateway "10.255.73.1" \
                          --name "test-public-subnet-${id}" \
                          "test-public-net-${id}" "10.255.73.128/25" || /bin/true
        pub_subnet_id=$( get_q_id subnet "10.255.73.128/25" )
    fi

