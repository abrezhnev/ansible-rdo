#!/bin/bash

function get_k_id 
{
   RETVAL=$( keystone ${1}-list | grep "${2}" | awk '{print $2}' )
   echo $RETVAL
}

function get_q_id 
{
   RETVAL=$( neutron ${1}-list | grep "${2}" | awk '{print $2}' )
   echo $RETVAL
}


cd /tmp

#
# Make sure we have an image to use 
#
 
if ! [ -r /tmp/cirros-0.3.1-x86_64-disk.img ]; then 
	wget http://download.cirros-cloud.net/0.3.1/cirros-0.3.1-x86_64-disk.img 
fi

CIRROS_IMAGE_ID=$( glance index | grep " cirros-0.3.1 " | awk '{ print $1}' )

if [ -z ${CIRROS_IMAGE_ID} ]; then
	IMAGE_INFO=$( glance image-create --name cirros-0.3.1 --is-public True --disk-format qcow2 --container-format bare --file cirros-0.3.1-x86_64-disk.img )
    CIRROS_IMAGE_ID=$( echo "${IMAGE_INFO}" |  grep "| id" | awk '{print $4}' )
fi

echo "IMAGE_ID: ${CIRROS_IMAGE_ID}"


#
# Make sure we have another image to use 
#
 
if ! [ -r /tmp/Fedora-x86_64-19-20130627-sda.qcow2 ]; then 
	wget http://download.fedoraproject.org/pub/fedora/linux/releases/19/Images/x86_64/Fedora-x86_64-19-20130627-sda.qcow2
fi

F19_IMAGE_ID=$( glance index | grep " Fedora19 " | awk '{ print $1}' )

if [ -z ${F19_IMAGE_ID} ]; then
	IMAGE_INFO=$( glance image-create --name Fedora19 --is-public True --disk-format qcow2 --container-format bare --file Fedora-x86_64-19-20130627-sda.qcow2 )
    F19_IMAGE_ID=$( echo "${IMAGE_INFO}" |  grep "| id" | awk '{print $4}' )
fi

echo "IMAGE2_ID: ${F19_IMAGE_ID}"


#--------------------------
# Create Neutron objects
# -------------------------

tenant="admin"
tenant_id=$( get_k_id tenant " ${tenant} " )

# Create a private net and subnet
NET=admin_net1
CIDR="192.168.0.0/24"
net_id=$( get_q_id net ${NET} )
if [ -z ${net_id} ]; then
    neutron net-create  --tenant_id $tenant_id "${NET}"
    net_id=$( get_q_id net "${NET}" )
fi

subnet_id=$( get_q_id subnet "${CIDR}" )
if [ -z ${subnet_id} ]; then
    neutron subnet-create --tenant_id "$tenant_id" "${NET}" "${CIDR}"
    subnet_id=$( get_q_id subnet "${CIDR}" )
fi

# create a 2nd net & subnet
NET=admin_net2
CIDR="192.168.1.0/24"
net_id2=$( get_q_id net ${NET} )
if [ -z ${net_id2} ]; then
    neutron net-create  --tenant_id $tenant_id "${NET}"
    net_id2=$( get_q_id net "${NET}" )
fi

subnet_id2=$( get_q_id subnet "${CIDR}" )
if [ -z ${subnet_id2} ]; then
    neutron subnet-create --tenant_id $tenant_id "${NET}" "${CIDR}"
    subnet_id2=$( get_q_id subnet "${CIDR}" )
fi

#
# Create a router and connect to these subnets
#
ROUTER=admin_router                                                                                                                                                  
router_id=$(  get_q_id router "${ROUTER}" )
if [ -z ${router_id} ]; then
    neutron router-create --tenant_id $tenant_id "${ROUTER}"
    router_id=$( get_q_id router "${ROUTER}" )
fi
neutron router-interface-add "${ROUTER}" ${subnet_id}  || /bin/true
neutron router-interface-add "${ROUTER}" ${subnet_id2} || /bin/true

#
# Create an external network matching the floating IP network space, 
#  and configure the external network as router gw 
#
PUBNET=public
CIDR="10.255.75.0/24"
pub_net_id=$( get_q_id net "${PUBNET}" )
if [ -z ${pub_net_id} ]; then                                                                                                          
    neutron net-create "${PUBNET}" --tenant_id $tenant_id --shared --router:external=True
    pub_net_id=$( get_q_id net "${PUBNET}" )
fi

pub_subnet_id=$( get_q_id subnet "${CIDR}" )
if [ -z ${pub_subnet_id} ]; then
    neutron subnet-create ${PUBNET} ${CIDR} --tenant_id $tenant_id --disable-dhcp || /bin/true
    pub_subnet_id=$( get_q_id subnet ${CIDR} )
fi

neutron router-gateway-set "${ROUTER}" ${pub_net_id} || /bin/true

